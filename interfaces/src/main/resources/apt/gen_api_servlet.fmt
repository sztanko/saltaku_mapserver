<#-- for each type annotated with DatatypeDefinition -->
<@forAllTypes var="type" annotationVar="interfaceAnnotation" annotation="com.saltaku.api.annotations.API" includeInterfaces="true">
<#-- tell apt-jelly that the outcome will be a java source artifact -->
<@javaSource name="com.saltaku.data.api.servlet.${type.simpleName}Servlets">
package com.saltaku.data.api.servlet;

<#-- all imports go here -->
import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.eclipse.jetty.servlet.ServletHolder;
import com.saltaku.api.servlet.beans.APIResult;
import org.eclipse.jetty.servlet.ServletContextHandler;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

import com.google.gson.Gson; 
import ${type.package}.${type.simpleName};
import com.saltaku.api.util.Request2JavaUtils;



/**
 * This class is autogenerated.
 */
public class ${type.simpleName}Servlets { 
   
   public static void addToContext(ServletContextHandler context, ${type.simpleName} api){
   <@forAllMethods var="method" annotation="com.saltaku.api.annotations.APICall" annotationVar="methodAnnotation">
   context.addServlet(new ServletHolder(new ${method.simpleName?cap_first}Servlet(api)),"/${interfaceAnnotation.name}/${method.simpleName}");
   </@forAllMethods>
   }
   
   <@forAllMethods var="method" annotation="com.saltaku.api.annotations.APICall" annotationVar="methodAnnotation">
   @SuppressWarnings("serial")
protected static class ${method.simpleName?cap_first}Servlet  extends HttpServlet { 

    private ${type.simpleName} api;
	Gson gson = Request2JavaUtils.buildGson();
	
	public ${method.simpleName?cap_first}Servlet(${type.simpleName} api) {
		super();
		this.api=api;
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public void do${methodAnnotation.method}(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
                // ${method}
                System.out.println("${method.simpleName?cap_first} - start");
                long t0=System.nanoTime();
                String p=null;
                String parameterDescription;
                APIResult<${method.returnType}> result=new APIResult<${method.returnType}>(); 
                result.params=(Map<String,String[]>)request.getParameterMap();
                
                response.setContentType("application/json");
                <@forAllParameters var="param">
                <#if param.type="int" || param.type="double" || param.type="float" || param.type="long" || param.type="short" || param.type="char" || param.type="boolean" >
                ${param.type} ${param.simpleName};
                <#else>
                ${param.type} ${param.simpleName} = null;
                </#if>
                </@forAllParameters>
                try{
                <@forAllParameters var="param">
                /*
                **
                ** Validating ${param.type} ${param.simpleName} **
                **
                */
	                <#assign isMandatory=true>
	                parameterDescription="No description";
	                <@ifHasAnnotation declaration=param annotation="com.saltaku.api.annotations.APIParam" var="pAnnotation">
	                <#assign isMandatory=pAnnotation.isMandatory />
	                parameterDescription="${pAnnotation.description}";
	                </@ifHasAnnotation>
	                p=request.getParameter("${param.simpleName}");
	                if(p==null)
	                	{
	                		 <#if isMandatory=true >
	                		throw new IllegalArgumentException("Parameter is missing. \n${param.type} ${param.simpleName} - "+parameterDescription);
	                		<#else>
	                		p="";
	                		<@ifHasAnnotation declaration=param annotation="com.saltaku.api.annotations.APIParam" var="pAnnotation">
	                		p="${pAnnotation.defaultValue}";
	                		</@ifHasAnnotation>
	                		</#if>
	                	}
	            	try{
	            		<#if param.type="int" >
	            		${param.simpleName}=Integer.parseInt(p);
	            		<#elseif param.type="double">
	            		${param.simpleName}=Double.parseDouble(p);
	            		<#elseif param.type="char">
	            		${param.simpleName}=p.charAt(0);
	            		<#elseif param.type="boolean">
	            		${param.simpleName}=Boolean.parseBoolean(p);
		                <#elseif param.type="java.lang.String">
	            		${param.simpleName}=p;
	    		        <#elseif param.type="int[]">
	            		${param.simpleName}=Request2JavaUtils.toIntArray(request.getParameterValues("${param.simpleName}"));
	            		<#elseif param.type="java.lang.String[]"> 
	            		${param.simpleName}=request.getParameterValues(p);
	            		<#elseif param.type="java.util.Map<java.lang.String,java.lang.String>"> 
	            		${param.simpleName}=Request2JavaUtils.toStringMap(request.getParameterValues("${param.simpleName}"));
	            		<#elseif param.type="java.util.Map<java.lang.String,java.lang.Integer>"> 
	            		${param.simpleName}=Request2JavaUtils.toIntMap(request.getParameterValues("${param.simpleName}"));
	            		<#elseif param.type="java.util.Date">
	            		${param.simpleName}=Request2JavaUtils.parseDate(p);
	            		<#else>
	            		${param.simpleName} = ${param.type}.valueOf(p);
	            		</#if>
	            		} catch(Exception e){
	            			
	            			throw new IllegalArgumentException("${param.simpleName} should be of type ${param.type}. It's value is \""+p+"\"");
	            		} 
	            // ----- ${param.type} ${param.simpleName} end ---- 
                
                
                </@forAllParameters>
                <#assign numParams=0>
                <@forAllParameters var="param" indexVar="pi"> <#assign numParams=pi></@forAllParameters>
                long t1=System.nanoTime();
                System.out.println("result.response=api.${method.simpleName}(<@forAllParameters var="param" indexVar="pi">${param.simpleName}<#if pi<numParams>,</#if></@forAllParameters>);");
                System.out.println("result.response=api.${method.simpleName}("+<@forAllParameters var="param" indexVar="pi">${param.simpleName}+<#if pi<numParams>", "+</#if></@forAllParameters>");");
                result.response=api.${method.simpleName}(<@forAllParameters var="param" indexVar="pi">${param.simpleName}<#if pi<numParams>,</#if></@forAllParameters>);
                long t2=System.nanoTime();
                result.requestTime=t2-t1;
                response.setStatus(HttpServletResponse.SC_OK); 
                }
                catch(Exception e){
                //e.printStackTrace();
                	result.success=false;
                	result.errorMessage=e.getMessage();
                	//response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                	response.setStatus(HttpServletResponse.SC_OK);
			    	result.errorMessage=result.errorMessage;
			    	result.reference=new ArrayList<String>();
			    	result.reference.add("${method.simpleName}: ${methodAnnotation.description}");
                	<@forAllParameters var="param" indexVar="pi">
                	result.reference.add("${param.type} ${param.simpleName} "<@ifHasAnnotation declaration=param annotation="com.saltaku.api.annotations.APIParam" var="pAnnotation">
                		+"Default value: ${pAnnotation.defaultValue}, is mandatory: ${pAnnotation.isMandatory}\nDescription: ${pAnnotation.description}"</@ifHasAnnotation>);
                		</@forAllParameters>
                	result.requestTime=System.nanoTime()-t0;	
			//e.printStackTrace(new PrintStream(response.getOutputStream())); 
                }
                	//response.getOutputStream().write(gson.toJson(result).getBytes());
                	Map<Object,Object> out=new HashMap<Object,Object>();
                	out.put("headers",result);
                	out.put("response",result.response);
                	result.response=null;
                	response.getOutputStream().write(gson.toJson(out).getBytes());
                	//response.getOutputStream().write(gson.toJson(result.response).getBytes());
                }
    }
    </@forAllMethods>
}
</@javaSource>
</@forAllTypes>